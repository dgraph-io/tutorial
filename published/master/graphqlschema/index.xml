<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphqlschemas on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/master/graphqlschema/</link>
    <description>Recent content in Graphqlschemas on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 May 2019 23:05:55 +1000</lastBuildDate><atom:link href="https://dgraph.io/tour/master/graphqlschema/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adding schema - mutating schema</title>
      <link>https://dgraph.io/tour/master/graphqlschema/1/</link>
      <pubDate>Wed, 26 Apr 2017 21:53:48 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/1/</guid>
      <description>As you saw in an earlier lesson, Dgraph accepts a GraphQL schema comprised of types to generate the GraphQL API.
The GraphQL API is a strictly-typed API. You can only add and query data that matches a predefined schema. However, do not let this limitation restrict you from iterating on the schema as needed.
Normally, in GraphQL implementations you would have to define inputs, queries, and mutations in the GraphQL schema being deployed.</description>
    </item>
    
    <item>
      <title>Adding Data - mutating data</title>
      <link>https://dgraph.io/tour/master/graphqlschema/2/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:47 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/2/</guid>
      <description>Now that you have updated the schema in the previous step, you can use the new mutations created by the GraphQL API to add data. Making changes to the graph stored in a GraphQL dataset is called mutating the data.
If you had a large amount of data to load after updating a GraphQL schema, it might be better to use the Live Loader and add the data as RDF triples.</description>
    </item>
    
    <item>
      <title>Node Identifiers</title>
      <link>https://dgraph.io/tour/master/graphqlschema/3/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:50 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/3/</guid>
      <description>In the last lesson, we mentioned that the Company type doesn&amp;rsquo;t have a unique identifier, so you can&amp;rsquo;t run a pre-built getCompany query or reference a specific company uniquely to create edges to pre-existing nodes.
While this statement was true from the GraphQL API perspective, every node does have a unique identifier (UID) using the ID scalar, even if that identifier is not mapped to a field within the GraphQL schema.</description>
    </item>
    
    <item>
      <title>Reverse edges</title>
      <link>https://dgraph.io/tour/master/graphqlschema/4/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:50 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/4/</guid>
      <description>In Dgraph, edges are directional. A query can&amp;rsquo;t traverse an edge in reverse. Fundamentally, there are two options for querying in both directions:
 Add the reverse edge to the schema and then add all the reverse edge data. Tell Dgraph to always store the reverse edge using the @reverse keyword in the DQL schema. (Not available in the GraphQL schema)  In the generated GraphQL API, Dgraph provides support for the first option with easy-to-use directives.</description>
    </item>
    
    <item>
      <title>Query with Reverse Edges</title>
      <link>https://dgraph.io/tour/master/graphqlschema/5/</link>
      <pubDate>Mon, 13 May 2019 23:05:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/5/</guid>
      <description>In the previous lesson, you saw a schema that includes two-way relationships or bidirectional edges. Now, you can run some more advanced queries that use the bidirectional edges that you have set up so far in your database.
With balanced inverse relationships, you can query which company a specific person works for, and also query which employees work at a specific company.
With a data graph that flows in both directions along these bidirectional edges, you can develop a multitude of applications.</description>
    </item>
    
    <item>
      <title>Exercise: Integrating existing data</title>
      <link>https://dgraph.io/tour/master/graphqlschema/6/</link>
      <pubDate>Mon, 01 May 2017 10:41:33 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/6/</guid>
      <description>In previous lessons, you added a new schema and loaded some company data. But, what about integrating the pre-existing dataset about friends and their pets with the dataset extension that includes companies?
If we try to reference an existing company in a mutation by name with our current schema, we will instead create a new Company node, as you saw in a previous lesson. The generated GraphQL API makes it very easy to search for a node to update, and update the node linking to existing or new nodes.</description>
    </item>
    
    <item>
      <title>Deleting Data</title>
      <link>https://dgraph.io/tour/master/graphqlschema/7/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:53 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/7/</guid>
      <description>Dgraph&amp;rsquo;s generated GraphQL API also provides mutations to delete data from the graph. Data can be deleted in the following ways:
 Update nodes and remove edges Update nodes and remove predicate values Delete a node with all of its inbound and outbound edges and predicate values.  To remove an edge from a node, you will need to use the same update mutation pattern that you saw in the previous lesson.</description>
    </item>
    
    <item>
      <title>Congratulations</title>
      <link>https://dgraph.io/tour/master/graphqlschema/8/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlschema/8/</guid>
      <description>Congratulations on completing the schema module.
The Dgraph instance you have running for the tutorial and the lessons in the modules so far give you a sandbox to play in. Make whatever queries or changes you like until you are comfortable with the material covered so far.
When you&amp;rsquo;re done, let&amp;rsquo;s move on to learning about the search capabilities of Dgraph&amp;rsquo;s generated GraphQL API. Then, you can delve into some larger datasets with GraphQL before taking a look at DQL, Dgraph&amp;rsquo;s query language.</description>
    </item>
    
  </channel>
</rss>
