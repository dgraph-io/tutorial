<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphqlbasics on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/master/graphqlbasic/</link>
    <description>Recent content in Graphqlbasics on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 May 2017 11:55:46 +1000</lastBuildDate><atom:link href="https://dgraph.io/tour/master/graphqlbasic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/1/</link>
      <pubDate>Wed, 26 Apr 2017 22:36:18 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/1/</guid>
      <description>Note For the following queries to run, you should have completed the introduction to setup your backend, define your schema, and insert the sample data. To learn more, see the GraphQL tour introduction.
 Let’s have a look at a &amp;ldquo;hello world&amp;rdquo; query in GraphQL.
Each query has at least one named root function, and query results are labeled accordingly.
Dgraph generates these functions based on a schema that you provide.</description>
    </item>
    
    <item>
      <title>Graphs as results</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/2/</link>
      <pubDate>Wed, 26 Apr 2017 22:36:22 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/2/</guid>
      <description>The last query returned some data, but the result wasn’t very interesting, nor did it teach us much about graphs.
In Dgraph and GraphQL, queries return graphs, not tables or lists of data.
A query is executed against a graph and the result is a subset of the queried graph.
Let’s improve the query to return Alice, along with her network of friends. Run the query to see the results.</description>
    </item>
    
    <item>
      <title>Data types, Schema and Type System</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/3/</link>
      <pubDate>Wed, 26 Apr 2017 22:36:41 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/3/</guid>
      <description>It’s time to talk about data types and scalars.
Type System A GraphQL API is a strictly-typed API. Every node is required to have a specific type. A GraphQL API built with Dgraph does some &amp;ldquo;magic&amp;rdquo; for you so, when you add data it assigns types, and it makes it easy to filter by types when querying data.
You might have noticed from Load Data that the data in triple format includes a predicate for &amp;lt;dgraph.</description>
    </item>
    
    <item>
      <title>Queries describe graphs</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/4/</link>
      <pubDate>Wed, 26 Apr 2017 22:36:45 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/4/</guid>
      <description>GraphQL query results are graphs; in fact, the query result is structured like the query.
The braces in a query like &amp;lt;edge name&amp;gt; { ... } signify nested blocks, where the edges inside the block are matched against nodes found by following the edge that begins the block.
We continue nesting the query as we follow edges from node to node. While not strictly required, it’s good style to indent the query.</description>
    </item>
    
    <item>
      <title>Functions and filtering</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/5/</link>
      <pubDate>Wed, 26 Apr 2017 22:36:47 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/5/</guid>
      <description>Nodes are filtered based on functions applied to the node&amp;rsquo;s outgoing edges.
So far, the queries have only applied a filter to the top level nodes using the getPerson function, but you can apply filters to any edge in the query.
Dgraph has many functions available for filtering results, including the following:
  fieldName: { allofterms: &amp;quot;term1 ... termN&amp;quot; }: matches nodes with an outgoing string field fieldName where the string contains all listed terms</description>
    </item>
    
    <item>
      <title>Logical Connectives (and, or, &amp; not)</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/6/</link>
      <pubDate>Wed, 26 Apr 2017 22:36:51 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/6/</guid>
      <description>The logical connectives and, or and not combine multiple functions in a filter.
When you provide multiple parameters in a filter argument they are combined with and logic by default, as in the following example:
{ getPerson(xid: &amp;quot;alice&amp;quot;) { xid friends(filter: { xid: { eq: &amp;quot;dave&amp;quot; } age: { eq: 35 } }) { xid age } } } With GraphQL, each parameter of an argument object must be unique. You can wrap arguments in logical lists using and and or, as follows:</description>
    </item>
    
    <item>
      <title>Sort Query Results</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/7/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:34 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/7/</guid>
      <description>You can sort (or order) query results by using the order argument on edges and query&amp;lt;Type&amp;gt; query functions.
When you apply ordering, the visualization of the graph remains unchanged, but the JSON response returned contains an ordered list.
The generated &amp;lt;type&amp;gt;Order input type accepts three arguments:
 asc - Sort by a field in ascending order desc - Sort by a field in descending order, and then - Add an additional sort argument.</description>
    </item>
    
    <item>
      <title>Pagination (first and offset)</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/8/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:36 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/8/</guid>
      <description>It&amp;rsquo;s not uncommon to have thousands of results for a query.
But you might want to paginate the results for display, or limit a large result set.
Dgraph generates first and offset arguments that can be used in combination to achieve such limits and paginate results:
 first: N Return only the first N results offset: N Skip the first N results  By default, query answers are ordered by uid.</description>
    </item>
    
    <item>
      <title>Count</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/9/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:40 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/9/</guid>
      <description>You may have noticed that Dgraph generates an &amp;lt;edgeName&amp;gt;Aggregate edge for every edge pointing to a list. These aggregate edges, along with aggregate queries, allow you to count the number of items in a query without the need to return every node.
These aggregate operations return an aggregate result type generated as &amp;lt;type&amp;gt;AggregateResult. This type provides a unique set of fields for counting and finding the minimum, maximum, average, and sum values depending on the types in the schema.</description>
    </item>
    
    <item>
      <title>How Dgraph Search Works</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/10/</link>
      <pubDate>Mon, 01 May 2017 11:55:43 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/10/</guid>
      <description>Given what you&amp;rsquo;ve seen so far, you&amp;rsquo;ve probably already understood this, but it&amp;rsquo;s worth going over.
The graphs in Dgraph can be huge, so starting your search from all nodes isn&amp;rsquo;t always efficient. Dgraph needs a place to start searching, and you choose this by starting your search from a root query function.
For example, you can use the root query functions with names like query&amp;lt;type&amp;gt; or get&amp;lt;type&amp;gt; to find an initial set of nodes.</description>
    </item>
    
    <item>
      <title>The has Function</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/11/</link>
      <pubDate>Mon, 01 May 2017 11:55:43 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/11/</guid>
      <description>The function has(edge_name) returns nodes that have an outgoing edge of the given name.
Dgraph also provides the filter argument has to find nodes that have an outgoing edge or predicate value.
The query example provided here queries for all people who have friends and then returns a count of how many friends they have.
Something to try: Query people that have friends and an age, and then count their friends that have a set age.</description>
    </item>
    
    <item>
      <title>Aliases</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/12/</link>
      <pubDate>Mon, 01 May 2017 11:55:43 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/12/</guid>
      <description>The output graph can rename fields in the output using aliases.
Aliases are useful when you want to apply two different filters to the same edge. The example query that&amp;rsquo;s provided for you in the editor uses aliases to include the friends edge twice, with a unique set of arguments and fields in each case.
Something to try: Query People, then select and alias the xid field as username and alias the query as users.</description>
    </item>
    
    <item>
      <title>Cascade</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/13/</link>
      <pubDate>Mon, 01 May 2017 11:55:46 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/13/</guid>
      <description>The @cascade directive removes any nodes from query results that don&amp;rsquo;t have all fields included in the query. You can also use the @cascade directive to remove nodes from query results where a filter inside a block returns no results.
In the following query, Dgraph returns all of Alice&amp;rsquo;s friends, whether or not they own a pet:
{ getPerson(xid: &amp;quot;alice&amp;quot;) { name age friends { name ownsPets { name } } } } With the @cascade directive, friends of Alice that don&amp;rsquo;t own a pet are not included in the result, as follows:</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/14/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:42 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/14/</guid>
      <description>Queries can contain comments.
Anything after a hash (#) on a line is a comment, and ignored for query processing.
This is helpful for debugging queries and for tutorials that need to explain parts of queries in-line, which is what we&amp;rsquo;ll do for the more complex queries that you&amp;rsquo;ll encounter later in the tutorial.</description>
    </item>
    
    <item>
      <title>Congratulations</title>
      <link>https://dgraph.io/tour/master/graphqlbasic/15/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:42 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlbasic/15/</guid>
      <description>You’ve finished this module!
You can use what you learned in this module to query graphs, filter the output, and sort and paginate the results using the generated GraphQL API provided by Dgraph.
Check out the list of sections again, go back and review anything that wasn&amp;rsquo;t clear, or continue to the next module.</description>
    </item>
    
  </channel>
</rss>
