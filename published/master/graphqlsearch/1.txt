type Person {
  id: ID!
  xid: String! @id
  name: String! @search(by: [hash, term, fulltext, regexp])
  age: Int @search
  friends: [Person] @hasInverse(field: "friends")
  ownsPets: [Animal] @hasInverse(field: "owner")
  employers: [Company] @hasInverse(field: "employees")
  manages: [Person] @hasInverse(field: "manager")
  manager: Person @hasInverse(field: "manages")
  lines: [Line] @hasInverse(field: "by")
}

type Line {
  id: ID!
  line: String! @search(by: [hash, term, fulltext, regexp])
  by: Person!
  to: Person
  in: Movie
}

type Movie {
  id: ID!
  name: String! @search(by: [exact, term, fulltext, regexp])
  released: DateTime @search
  lines: [Line] @hasInverse(field: "in")
}

type Company {
  id: ID
  name: String! @search(by: [hash, term, fulltext, regexp])
  industry: String @search(by: [hash, term])
  employees: [Person] @hasInverse(field: "employers")
  # change this line
}

type Animal {
  id: ID!
  xid: String! @id
  name: String! @search(by: [hash, term, fulltext, regexp])
  owner: Person @hasInverse(field: "ownsPets")
  # change this line
}