<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphqlmoredata on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/master/graphqlmoredata/</link>
    <description>Recent content in Graphqlmoredata on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://dgraph.io/tour/master/graphqlmoredata/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Bigger Dataset</title>
      <link>https://dgraph.io/tour/master/graphqlmoredata/1/</link>
      <pubDate>Thu, 27 Apr 2017 15:42:54 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlmoredata/1/</guid>
      <description>OK, we are off to a good start with Dgraph and GraphQL. Now let&amp;rsquo;s see what you can do with Dgraph&amp;rsquo;s advanced capabilities; like query aggregation, geo-queries, and string querying. To do all of this we need to move from the small datasets that we started with and try out something bigger; much bigger.
In the Dgraph GitHub repository, you&amp;rsquo;ll find a dataset about movies, directors and actors. There&amp;rsquo;s around one million triples in the dataset.</description>
    </item>
    
    <item>
      <title>Movies Schema</title>
      <link>https://dgraph.io/tour/master/graphqlmoredata/2/</link>
      <pubDate>Mon, 15 May 2017 15:33:51 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlmoredata/2/</guid>
      <description>Given the previous lesson&amp;rsquo;s schema, we have provided you here some example queries to run.
{ queryDirector(filter: { or: [ { name: { allofterms: &amp;quot;Marc Caro&amp;quot; } } { name: { allofterms: &amp;quot;Jean-Pierre Jeunet&amp;quot; } } ]}) { id name films { name } } } { queryGenre(filter: { name: { regexp: &amp;quot;/.*alien.*/i&amp;quot; } }) { name films(first: 2) { name starring { actor { name } character { name } } } } } { queryFilm(filter: { name: { alloftext: &amp;quot;the man runs&amp;quot; } }) { name starringAggregate { count } } } </description>
    </item>
    
    <item>
      <title>Next steps</title>
      <link>https://dgraph.io/tour/master/graphqlmoredata/3/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlmoredata/3/</guid>
      <description>Congratulations on completing the GraphQL tutorial portion of the Dgraph Tour!
You should now be able to load a schema into Dgraph&amp;rsquo;s GraphQL API and perform basic queries and mutations on it.
Where to go from here  Follow the Build a Message Board App in React course to put into application what you have learned. You can find more in-depth details in Dgraph&amp;rsquo;s GraphQL API Documentation. See Deploy and Manage Documentation to learn how you can run Dgraph in your own environment.</description>
    </item>
    
  </channel>
</rss>
