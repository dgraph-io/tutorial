<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphqlintroes on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/master/graphqlintro/</link>
    <description>Recent content in Graphqlintroes on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Nov 2018 22:28:55 +1000</lastBuildDate><atom:link href="https://dgraph.io/tour/master/graphqlintro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Welcome</title>
      <link>https://dgraph.io/tour/master/graphqlintro/1/</link>
      <pubDate>Wed, 26 Apr 2017 21:52:39 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/1/</guid>
      <description>Welcome to GraphQL powered by Dgraph database.
This interactive tutorial will get you up and running writing queries in GraphQL using Dgraph Cloud, a Dgraph database backend that we offer as a managed service.
Note To take a tour of Dgraph using Dgraph Query Language (DQL, formerly known as GraphQL+-), please see the DQL-focused portion of this tour. The first five sections of this tour focus exclusively on using Dgraph Cloud with GraphQL.</description>
    </item>
    
    <item>
      <title>Run Dgraph</title>
      <link>https://dgraph.io/tour/master/graphqlintro/2/</link>
      <pubDate>Wed, 26 Apr 2017 22:14:20 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/2/</guid>
      <description>You can run an instance of Dgraph on your local supported machine, but to make this tutorial easier to follow along with for all users, we will use Dgraph Cloud.
Dgraph Cloud provides Dgraph database as a managed service, so you can focus on building apps and websites instead of deploying and managing hardware and servers.
Dgraph Cloud offers three service tiers to support your database needs as your database needs grow.</description>
    </item>
    
    <item>
      <title>Load Schema</title>
      <link>https://dgraph.io/tour/master/graphqlintro/3/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/3/</guid>
      <description>Dgraph generates a GraphQL API endpoint complete with CRUD operations after ingesting a GraphQL schema comprised of types. So, when you upload your schema, you already get the ability to perform CRUD operations on instances of each type in your schema, without further coding.
You can copy the schema provided in the editable code block provided here, and then paste it into the Schema input on your Dgraph Cloud instance.</description>
    </item>
    
    <item>
      <title>Load Data</title>
      <link>https://dgraph.io/tour/master/graphqlintro/4/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/4/</guid>
      <description>You can load data into a Dgraph database with GraphQL mutations.
To load the small dataset that we have provided for your use in the upcoming lessons, run the mutations that we have provided by clicking Run.
For the consistency of mutations and queries in this tutorial we use an xid field to identify nodes. We could have not used the xid field and relied solely upon the id field with the scalar type ID, but assigned ids will vary across instances.</description>
    </item>
    
    <item>
      <title>Mutation Introduction</title>
      <link>https://dgraph.io/tour/master/graphqlintro/5/</link>
      <pubDate>Sun, 04 Nov 2018 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/5/</guid>
      <description>In the last exercise, you added some data into Dgraph. Adding or removing data in Dgraph is called a mutation.
With Dgraph&amp;rsquo;s GraphQL API, every item that is created is called a node. In the previous example we added a total of 11 nodes: eight people and three animals. Nodes can have properties, such as the name and age of the person, and the name of their animal. Nodes can be connected to other nodes by edges.</description>
    </item>
    
    <item>
      <title>Graphs</title>
      <link>https://dgraph.io/tour/master/graphqlintro/6/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/6/</guid>
      <description>So far in this tour, you have deployed a Dgraph Cloud backend and run a few mutations to edit data. But before proceeding further, you&amp;rsquo;d probably like to understand some basics, like: What is a graph, and what does it have to do with databases?
Graphs describe objects and the interconnections between them. You may have heard of friendship or social network graphs, where data points (people) are connected together through known relationships.</description>
    </item>
    
    <item>
      <title>Graph Databases</title>
      <link>https://dgraph.io/tour/master/graphqlintro/7/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:58 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/7/</guid>
      <description>A graph database is a database optimized for storing and querying graphs. When it comes to relationships, graph databases are much faster than SQL databases.
SQL databases get bogged down by graph-like data because following edges means joining tables; sometimes big tables. And, the more edges, the more joins, and the more data needs to be loaded and processed.
In a graph database, the edges are a fundamental structure, so following edges occurs in a single lookup making edge-based operations blazingly fast.</description>
    </item>
    
    <item>
      <title>GraphQL API</title>
      <link>https://dgraph.io/tour/master/graphqlintro/8/</link>
      <pubDate>Wed, 26 Apr 2017 22:29:00 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/8/</guid>
      <description>Dgraph at its core is a loosely-typed database, and can be used in a NoSQL-like schema-less fashion. GraphQL provides a strongly typed API that is served from the core of a Dgraph database instance.
All other GraphQL databases apply GraphQL as a layer served above the database, but starting with Dgraph 20.03, Dgraph brings GraphQL into the core of the database itself. Dgraph was developed around DQL&amp;rsquo;s GraphQL-like syntax, so integrating native GraphQL was a natural fit.</description>
    </item>
    
    <item>
      <title>Congratulations</title>
      <link>https://dgraph.io/tour/master/graphqlintro/9/</link>
      <pubDate>Wed, 26 Apr 2017 22:29:00 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/master/graphqlintro/9/</guid>
      <description>Congratulations, you&amp;rsquo;ve finished the first module of the tutorial! By now, you should have seen an example mutation and query, and know a little about graphs.
Let&amp;rsquo;s investigate some graphs and start writing more queries!</description>
    </item>
    
  </channel>
</rss>
