<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intros on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/intro/</link>
    <description>Recent content in Intros on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Nov 2018 22:28:55 +1000</lastBuildDate>
    
	<atom:link href="https://dgraph.io/tour/intro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Welcome</title>
      <link>https://dgraph.io/tour/intro/1/</link>
      <pubDate>Wed, 26 Apr 2017 21:52:39 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/1/</guid>
      <description>Hi,
Welcome to Dgraph.
This interactive tutorial will get you up and running with Dgraph and writing graph queries in GraphQL+-, Dgraph&amp;rsquo;s own graph query language.
The tutorial is divided into modules. You can access the table of contents at any time by clicking &amp;ldquo;A Tour of Dgraph&amp;rdquo; in the top left and can move backwards and forwards using the right and left arrows at the bottom of this pane.</description>
    </item>
    
    <item>
      <title>Run Dgraph</title>
      <link>https://dgraph.io/tour/intro/2/</link>
      <pubDate>Wed, 26 Apr 2017 22:14:20 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/2/</guid>
      <description>Let&amp;rsquo;s run an instance of Dgraph on your machine; that&amp;rsquo;ll give you a handle on installing Dgraph and loading data yourself.
All the data in this tutorial will be stored in the instance you install, and all the queries will look for Dgraph on your local machine. By running it in a container, you&amp;rsquo;ll have a fresh Dgraph that will serve as a sandbox for you to learn and experiment.</description>
    </item>
    
    <item>
      <title>Load Schema</title>
      <link>https://dgraph.io/tour/intro/3/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/3/</guid>
      <description>Once you have Dgraph up and running, press run on the panel to the right. This will load a schema into Dgraph for us to use in the first steps of the tutorial. Don&amp;rsquo;t worry too much about the syntax for now, we&amp;rsquo;ll cover all that in later lessons, just check in the response panel that the operation was a success.
Note Note that Schema changes are made via Alter operations only.</description>
    </item>
    
    <item>
      <title>Load Data</title>
      <link>https://dgraph.io/tour/intro/4/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/4/</guid>
      <description>Now that a schema has been loaded, it&amp;rsquo;s time to load some data. Press the run button again and check that the response panel indicates the data was loaded successfully.
Don&amp;rsquo;t worry about the syntax for now, it will be explained later.
You can load the same example data using JSON format. You&amp;rsquo;re able to do that through our clients, cURL or Ratel UI.
See the JSON:
 Show answer   { &amp;quot;set&amp;quot;: [ { &amp;quot;uid&amp;quot;: &amp;quot;_:michael&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Michael&amp;quot;, &amp;quot;dgraph.</description>
    </item>
    
    <item>
      <title>Mutation Introduction</title>
      <link>https://dgraph.io/tour/intro/5/</link>
      <pubDate>Sun, 04 Nov 2018 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/5/</guid>
      <description>In the last exercise, you added some data into Dgraph. Adding or removing data in Dgraph is called a mutation. We have two types of standard formats for mutations: RDF (Resource Description Framework) N-Quad and JSON (JavaScript Object Notation). RDF is a widely used standard in Graph or Ontology systems.
In Dgraph the mutation operations consist of two patterns: blank UID reference or explicit UID reference.
This introduction is important for the coming exercises, many of the concepts presented here will be repeated in the next few chapters.</description>
    </item>
    
    <item>
      <title>Graphs</title>
      <link>https://dgraph.io/tour/intro/6/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/6/</guid>
      <description>We&amp;rsquo;ve started Dgraph, but first things first: What is a graph and what has that got to do with databases?
Graphs describe objects and the interconnections between them. Many people have heard of friendship graphs, or social network graphs, so let’s start there.
Note OK, you&amp;rsquo;ll have to use your imagination here. We&amp;rsquo;re still building the tutorial, and we don&amp;rsquo;t have the visualizations up and running just yet. By starting Dgraph, you&amp;rsquo;ll have the visualization component working just fine.</description>
    </item>
    
    <item>
      <title>Graph Databases</title>
      <link>https://dgraph.io/tour/intro/7/</link>
      <pubDate>Wed, 26 Apr 2017 22:28:58 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/7/</guid>
      <description>A graph database is a database optimized for storing and querying graphs. When it comes to relationships, graph databases are much faster than SQL databases.
SQL databases get bogged down by graph-like data because following edges means joining tables; sometimes big tables; the more edges, the more joins, and the more data needs to be loaded and processed.
In a graph database, the edges are a fundamental structure, so following edges is a single lookup, making this operation blazingly fast.</description>
    </item>
    
    <item>
      <title>Congratulations</title>
      <link>https://dgraph.io/tour/intro/8/</link>
      <pubDate>Wed, 26 Apr 2017 22:29:00 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/intro/8/</guid>
      <description>Congratulations, you&amp;rsquo;ve finished the first module of the tutorial.
By now you should have Dgraph up and running for the tutorial and know a little about graphs.
Let’s investigate some graphs and start writing queries.</description>
    </item>
    
  </channel>
</rss>