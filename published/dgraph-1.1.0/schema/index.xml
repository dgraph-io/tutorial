<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schemas on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/dgraph-1.1.0/schema/</link>
    <description>Recent content in Schemas on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 May 2019 23:05:55 +1000</lastBuildDate>
    
	<atom:link href="https://dgraph.io/tour/dgraph-1.1.0/schema/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding schema - mutating schema</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/1/</link>
      <pubDate>Wed, 26 Apr 2017 21:53:48 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/1/</guid>
      <description>As we saw in an earlier lesson, Dgraph stores a schema describing the types of predicates.
When we want to add new data to an existing schema, we can just add it. But if we want to add new data in a new schema we have two choices
 Add the data and let Dgraph work out the schema, or Specify a schema and then add the data  Dgraph can work out the schema just fine.</description>
    </item>
    
    <item>
      <title>Adding Data - mutating data</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/2/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:47 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/2/</guid>
      <description>Now that the schema has been updated we can add data as triples.
Dgraph creates its own internal id’s for nodes, but we need some way to refer to the same node many times in our input data. That’s what _:company1 does.
Technically, these are ‘blank nodes’. They tell Dgraph to create a node, give it an internal id and make sure it’s used consistently.
After the upload, the label _:company1 doesn’t exist in Dgraph and we can’t query for it.</description>
    </item>
    
    <item>
      <title>External Identifiers</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/3/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:50 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/3/</guid>
      <description>Dgraph doesn&amp;rsquo;t support setting external IDs for nodes. If an application requires unique identifiers for nodes other than the UIDs assigned by Dgraph, then these have to be supplied as edges. It&amp;rsquo;s up to a user application to ensure the uniqueness of such IDs/keys.
More about in https://docs.dgraph.io/mutations/#external-ids</description>
    </item>
    
    <item>
      <title>Language Support</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/4/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:50 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/4/</guid>
      <description>Language tags are used on the string on input
_:myID &amp;lt;an_edge&amp;gt; &amp;quot;something&amp;quot;@en . _:myID &amp;lt;an_edge&amp;gt; &amp;quot;某物&amp;quot;@zh-Hans . and on the edge in a query.
You can do the same example using JSON format. You&amp;rsquo;re able to do that through our clients, cURL or Ratel UI.
See the JSON:
 { &amp;quot;set&amp;quot;: [ { &amp;quot;uid&amp;quot;: &amp;quot;_:myID&amp;quot;, &amp;quot;an_edge@en&amp;quot;: &amp;quot;something&amp;quot;, &amp;quot;an_edge@zh-Hans&amp;quot;: &amp;quot;某物&amp;quot; } ] }  Tip The JSON example may end up helping you better understand the format in RDF.</description>
    </item>
    
    <item>
      <title>Reverse edges</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/5/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:50 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/5/</guid>
      <description>Edges are directional. A query can&amp;rsquo;t traverse an edge in reverse.
There are two choices to query in both directions
  Add the reverse edge to the schema and add all the reverse edge data.
  Tell Dgraph to always store the reverse edge using the @reverse keyword in the schema.
  Run the schema mutation and Dgraph will compute all the reverse edges. The reverse edge of an_edge is ~an_edge.</description>
    </item>
    
    <item>
      <title>Reverse edges Query</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/6/</link>
      <pubDate>Mon, 13 May 2019 23:05:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/6/</guid>
      <description>The reverse edge of anEdge is ~anEdge.
In this query we want to know who works for &amp;ldquo;CompanyABC&amp;rdquo; without having to add extra edges. So we use a reverse edge for the specific case. And then we use an alias &amp;ldquo;work_here&amp;rdquo; to differentiate the query result.</description>
    </item>
    
    <item>
      <title>Exercise : Integrating existing data</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/7/</link>
      <pubDate>Mon, 01 May 2017 10:41:33 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/7/</guid>
      <description>We&amp;rsquo;ve added a new schema and loaded some company data, but what about integrating our previous friends dataset with this company one.
Trying to use the blank nodes from previous mutations won&amp;rsquo;t work. The blank nodes aren&amp;rsquo;t persisted in the store, so when referring to nodes created in a previous mutation, it&amp;rsquo;s the UID that&amp;rsquo;s needed. So instead of
_:sarah &amp;lt;works_for&amp;gt; _:company1 . it&amp;rsquo;s
&amp;lt;uid-for-sarah&amp;gt; &amp;lt;works_for&amp;gt; &amp;lt;uid-for-company1&amp;gt; . Because the uid picked by Dgraph is unique, we can&amp;rsquo;t help you this time.</description>
    </item>
    
    <item>
      <title>Deleting Data</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/8/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:53 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/8/</guid>
      <description>There are three deletion options inside a delete mutation.
 &amp;lt;uid&amp;gt; &amp;lt;edge&amp;gt; &amp;lt;uid&amp;gt;/&amp;quot;value&amp;quot; . Delete a single triple &amp;lt;uid&amp;gt; &amp;lt;edge&amp;gt; * . Delete all triples for a given edge &amp;lt;uid&amp;gt; * * . Delete all triples for a given node  The examples given here are not complete. Uids assigned on your instance would be unique. Try something out; you&amp;rsquo;re not going to hurt anyone, just delete their friends.
You can do the same example using JSON format.</description>
    </item>
    
    <item>
      <title>Expand Predicate</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/9/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/9/</guid>
      <description>expand(...predicates...) is used to query for all given predicates, rather than listing them in the query. Querying
expand(_all_) queries returns all edges out of every node matched at that level in the query. Expand can be nested to then expand all predicates at the next level.
We&amp;rsquo;ll see later how to use expand with variables to query for a particular set of edges.
Note As of version v1.1 you will need to add Types in your schema for expand(_all_) to work.</description>
    </item>
    
    <item>
      <title>Congratulations</title>
      <link>https://dgraph.io/tour/dgraph-1.1.0/schema/10/</link>
      <pubDate>Thu, 27 Apr 2017 23:05:55 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.1.0/schema/10/</guid>
      <description>This is the end of the schema module.
The Dgraph instance you have running for the tutorial and the lessons in the modules so far give you a sandbox to play in. Make whatever queries or changes you like until you are comfortable with the material covered so far.
When you&amp;rsquo;re done, let&amp;rsquo;s move up to bigger datasets and see more of Dgraph&amp;rsquo;s query language.</description>
    </item>
    
  </channel>
</rss>