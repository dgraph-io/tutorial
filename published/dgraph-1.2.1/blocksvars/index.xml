<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blocksvars on A Tour of Dgraph</title>
    <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/</link>
    <description>Recent content in Blocksvars on A Tour of Dgraph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 May 2017 11:01:12 +1000</lastBuildDate>
    
	<atom:link href="https://dgraph.io/tour/dgraph-1.2.1/blocksvars/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multiple Named Query Blocks</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/1/</link>
      <pubDate>Mon, 01 May 2017 13:45:26 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/1/</guid>
      <description>Note From now on, to run the queries, you&amp;rsquo;ll need to have loaded the million triple movie dataset.
 Queries can be issued as multiples.
For queries labelled q1, ..., qn issued as a multiple query block, the JSON result will contain labelled answer blocks q1, ..., qn for each query.
If a block is labelled with var, no results are returned for that query.
Queries issued in this way are independent.</description>
    </item>
    
    <item>
      <title>Query Variables</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/2/</link>
      <pubDate>Mon, 01 May 2017 20:46:58 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/2/</guid>
      <description>Results can be stored in variables and used elsewhere in the query.
Variables are declared by
var_name as some_block { ... } where var_name is any distinct variable name and some_block is either a whole query or an internal block of a query matching on an edge.
Once defined, variables can be used in:
 the same query in a child of the defining block (not a parent of the definition) in another query  Variables don&amp;rsquo;t affect the semantics of the query at the point they are defined.</description>
    </item>
    
    <item>
      <title>Query Variables in a child block</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/3/</link>
      <pubDate>Mon, 01 May 2017 20:47:01 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/3/</guid>
      <description>Query variables in a child block allow the query to carry answers matched at one level down to the children to filter against.
For example, take of the set of actors in all Jane Campion films; our challenge is to find which pairs in that set have acted together on a film not directed by Jane Campion.
The query here uses the sets of all Jane Campion&amp;rsquo;s films JC_films and all actors in any Jane Campion film JC_actors in child blocks.</description>
    </item>
    
    <item>
      <title>Query Variables in another query block I</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/4/</link>
      <pubDate>Mon, 01 May 2017 20:48:27 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/4/</guid>
      <description>Let&amp;rsquo;s take a second to think about that last query. The variable JC_actor evaluated to all actors in any Jane Campion film. No matter where we use it, it&amp;rsquo;s the full set.
That&amp;rsquo;s the key to using Dgraph&amp;rsquo;s variables correctly: understand that they are global in the sense that they evaluate to all nodes that could match that edge in the query, not local in the sense that would evaluate to different results for each Jane Campion film.</description>
    </item>
    
    <item>
      <title>Query Variables in another query block II</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/5/</link>
      <pubDate>Mon, 01 May 2017 20:48:30 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/5/</guid>
      <description>Query variables used in other query blocks also allow to reorganize results.</description>
    </item>
    
    <item>
      <title>Exercise: Query Variables linking queries</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/6/</link>
      <pubDate>Mon, 01 May 2017 20:48:32 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/6/</guid>
      <description>We&amp;rsquo;ve seen two common uses for variables: filtering and reorganizing results. Another is linking two queries to gain some new insight based on the joined results.
Let&amp;rsquo;s look at an example of joining two queries.
For two directors find the actors who have worked with both (not necessarily on the same movie). Many directors won&amp;rsquo;t have actors in common, so start with some you are sure will (the answer below uses Peter Jackson and Martin Scorsese who have a small number of actors in common).</description>
    </item>
    
    <item>
      <title>Value variables - min and max</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/7/</link>
      <pubDate>Tue, 02 May 2017 11:01:04 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/7/</guid>
      <description>We&amp;rsquo;ve just looked at variables that stored uid results from query blocks. Value variables store the values against which they match.
Value variables work differently to query variables. Value variables are context dependent - in fact, they are a map from UID to value and we can exploit this when reading and filtering value variables. The value from a value variable is extracted with val(&amp;lt;variable-name&amp;gt;).
At the point of definition, because the context is within the appropriate UID, value variables act like the corresponding value.</description>
    </item>
    
    <item>
      <title>Exercise : Value variables - sum and avg</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/8/</link>
      <pubDate>Tue, 02 May 2017 11:01:06 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/8/</guid>
      <description>Summation sum and average avg can only be applied to value variables that contain int and float data.
Find which is greater, the number of movies by Steven Spielberg or the average number of actors in movies directed by him.
This query can be done in a single block, but you&amp;rsquo;ll see here how values are available in other blocks if the corresponding UID&amp;rsquo;s are available for the value map.</description>
    </item>
    
    <item>
      <title>Value variables: filtering and ordering</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/9/</link>
      <pubDate>Tue, 02 May 2017 11:01:09 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/9/</guid>
      <description>If the context provided by the UIDs of the block is correct, value variables can also be used in filtering and ordering.
Here, ID will be the UID&amp;rsquo;s of all directors of name Steven and average is a map from those UID&amp;rsquo;s to the average for each director. The filtering, ordering and result for var(average) are evaluated in that context to obtain each value.
A value variable can be used in place of a UID variable, uid(&amp;lt;value-variable&amp;gt;) evaluates to the UID&amp;rsquo;s in the map.</description>
    </item>
    
    <item>
      <title>Value variables: math functions</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/10/</link>
      <pubDate>Tue, 02 May 2017 11:01:09 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/10/</guid>
      <description>As well as min, max, avg, and sum to aggregate, Dgraph supports a host of functions that can be applied to value variables. These need to be enclosed in math(...) and stored in a variable.
The full list is:
   Operator Accepted Type Notes     + - * / % int and float    min max All types except geo and bool    &amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == !</description>
    </item>
    
    <item>
      <title>Exercise : Latest Movies</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/11/</link>
      <pubDate>Tue, 02 May 2017 11:01:12 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/11/</guid>
      <description>Write a query to find the most recently released movie by each director and order the result by the release dates.
If you need some hints try:  Show answer  To solve this, you&amp;rsquo;ll need to
 work out how to query for all directors - what have directors done that make them directors? find the most recent release date for each director sort the results by the most recent release return the directors name, and the details of the most recent release you&amp;rsquo;ll need one query to get the directors and their latest movies, and another query to sort this to get most recent movies first for something extra, try using since to work out how many days since the movie was released (or how many days till release, for some)    Spoiler alert:  Show answer  { # Get all directors var(func: has(director.</description>
    </item>
    
    <item>
      <title>GroupBy</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/12/</link>
      <pubDate>Tue, 02 May 2017 11:01:12 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/12/</guid>
      <description>A groupby query aggregates query results given a set of properties on which to group elements. For example, a query containing the block
director.film @groupby(genre) { a as count(uid) } finds nodes reachable along the director.film edge, partitions these into groups based on genre, then counts how many nodes are in each group.
Inside a groupby block, only aggregations are allowed and count can only be applied to uid.
The result is the grouped edges and the value variables for the aggregations.</description>
    </item>
    
    <item>
      <title>Congratulations!</title>
      <link>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/13/</link>
      <pubDate>Tue, 02 May 2017 11:01:12 +1000</pubDate>
      
      <guid>https://dgraph.io/tour/dgraph-1.2.1/blocksvars/13/</guid>
      <description>You&amp;rsquo;ve finished this lesson.
Next up, string and geo searching. Or use the index to go to another topic.</description>
    </item>
    
  </channel>
</rss>